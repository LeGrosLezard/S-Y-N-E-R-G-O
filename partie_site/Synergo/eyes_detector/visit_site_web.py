import cv2
import numpy as np


POSITION_RIGHT = [[(344, 293)], [(345, 293)], [(345, 293)], [(345, 293)], [(345, 293)], [(347, 291)], [(347, 291)], [(347, 291)], [(348, 290)], [(348, 290)], [(349, 290)], [(349, 289)], [(349, 290)], [(349, 289)], [(349, 289)], [(349, 290)], [(349, 289)], [(349, 289)], [(349, 289)], [(349, 289)], [(349, 289)], [(348, 289)], [(348, 289)], [(349, 290)], [], [], [(349, 293)], [(348, 290)], [(348, 290)], [(349, 290)], [(349, 290)], [(349, 290)], [(348, 290)], [(347, 290)], [(347, 290)], [(346, 290)], [(344, 289)], [(344, 289)], [(344, 289)], [(343, 290)], [(344, 289)], [(343, 289)], [(343, 289)], [(343, 289)], [(343, 289)], [(343, 289)], [(342, 289)], [(343, 289)], [(343, 290)], [(343, 289)], [(344, 290)], [(344, 290)], [(343, 291)], [(343, 291)], [(343, 291)], [(343, 291)], [(342, 291)], [(342, 291)], [(343, 291)], [(343, 291)], [(343, 290)], [(343, 290)], [(344, 290)], [(344, 290)], [(345, 290)], [(346, 290)], [(346, 290)], [(346, 291)], [(346, 290)], [(346, 290)], [(346, 291)], [(346, 290)], [(346, 290)], [(346, 290)], [(346, 290)], [(345, 290)], [(345, 289)], [(345, 290)], [(346, 289)], [(346, 289)], [(346, 289)], [(347, 288)], [(347, 287)], [(347, 287)], [(347, 286)], [(346, 288)], [], [], [(343, 289)], [(343, 287)], [(343, 286)], [(343, 286)], [(343, 286)], [(343, 286)], [(343, 286)], [(343, 285)], [(343, 285)], [(343, 285)], [(343, 285)], [(343, 285)], [(344, 286)], [(343, 286)], [(343, 286)], [(343, 285)], [(343, 285)], [(343, 284)], [(343, 284)], [(343, 285)], [(343, 284)], [(342, 284)], [(342, 285)], [(341, 285)], [(341, 286)], [(341, 286)], [(340, 285)], [(341, 286)], [(341, 286)], [(341, 286)], [(341, 286)], [(341, 286)], [(341, 286)], [(341, 286)], [(341, 287)], [(341, 288)], [(341, 289)], [(340, 289)], [(341, 289)], [(341, 289)], [(341, 289)], [(341, 289)], [(341, 289)], [(341, 290)], [(341, 289)], [(341, 290)], [(341, 290)], [(341, 290)], [(341, 290)], [(341, 290)], [(341, 291)], [(341, 291)], [(341, 292)], [(341, 292)], [(341, 292)], [(340, 292)], [(341, 292)], [(341, 293)], [(342, 293)], [(342, 293)], [(341, 293)], [(342, 293)], [(342, 293)], [(341, 294)], [(341, 293)], [(343, 292)], [(343, 292)], [(343, 292)], [(344, 291)], [(345, 290)], [(344, 291)], [(344, 291)], [(345, 291)], [(344, 291)], [(345, 291)], [(344, 290)], [(344, 290)], [(345, 291)], [], [(347, 290)], [(347, 286)], [(346, 285)], [(346, 285)], [(346, 284)], [(347, 282)], [(347, 282)], [(347, 282)], [(346, 281)], [(343, 282)], [(340, 282)], [(340, 282)], [(340, 282)], [(341, 284)], [(343, 287)], [(343, 287)], [(342, 287)], [(342, 288)], [(342, 288)], [(341, 291)], [(342, 293)], [(342, 293)], [(342, 293)], [(342, 292)], [(343, 290)], [(343, 290)], [(345, 289)], [(345, 289)], [(345, 288)], [(344, 287)], [(343, 287)], [(341, 286)], [(341, 286)], [(343, 288)], [(342, 289)], [(342, 289)], [(344, 292)], [], [(340, 289)], [(339, 287)], [(339, 285)], [(339, 283)], [(340, 281)], [(340, 279)], []]

POSITION_LEFT = [[(419, 290)], [(420, 290)], [(420, 290)], [(420, 290)], [(420, 290)], [(421, 288)], [(421, 288)], [(422, 288)], [(423, 288)], [(422, 287)], [(423, 287)], [(424, 287)], [(424, 287)], [(424, 286)], [(424, 286)], [(424, 287)], [(424, 287)], [(424, 287)], [(424, 286)], [(424, 286)], [(423, 286)], [(423, 286)], [(423, 286)], [(423, 287)], [], [], [(423, 291)], [(423, 288)], [(423, 287)], [(423, 287)], [(423, 287)], [(423, 287)], [(423, 288)], [(422, 288)], [(421, 288)], [(420, 287)], [(419, 287)], [(418, 287)], [(418, 286)], [(418, 287)], [(418, 286)], [(418, 286)], [(418, 286)], [(418, 286)], [(417, 286)], [(417, 286)], [(417, 287)], [(417, 287)], [(417, 287)], [(418, 287)], [(418, 287)], [(418, 287)], [(418, 288)], [(418, 289)], [(417, 289)], [(417, 288)], [(417, 289)], [(417, 289)], [(417, 288)], [(417, 288)], [(418, 288)], [(418, 288)], [(418, 288)], [(418, 287)], [(419, 287)], [(420, 288)], [(420, 288)], [(420, 288)], [(420, 288)], [(421, 288)], [(420, 288)], [(420, 288)], [(420, 288)], [(420, 288)], [(420, 287)], [(420, 287)], [(420, 287)], [(420, 287)], [(420, 287)], [(420, 286)], [(420, 287)], [(421, 285)], [(421, 284)], [(421, 284)], [(421, 284)], [(420, 285)], [], [], [(417, 286)], [(417, 285)], [(417, 284)], [(417, 284)], [(417, 283)], [(416, 283)], [(416, 283)], [(416, 283)], [(416, 283)], [(416, 282)], [(416, 282)], [(417, 283)], [(417, 283)], [(417, 283)], [(417, 283)], [(416, 283)], [(417, 282)], [(417, 282)], [(416, 282)], [(416, 282)], [(416, 282)], [(416, 282)], [(415, 282)], [(415, 283)], [(414, 283)], [(414, 284)], [(414, 283)], [(414, 283)], [(414, 283)], [(414, 283)], [(415, 283)], [(415, 283)], [(415, 283)], [(415, 283)], [(415, 285)], [(414, 286)], [(414, 286)], [(414, 286)], [(414, 286)], [(415, 286)], [(415, 286)], [(415, 286)], [(415, 286)], [(415, 287)], [(415, 287)], [(415, 287)], [(415, 287)], [(414, 287)], [(414, 287)], [(414, 287)], [(414, 288)], [(415, 289)], [(415, 289)], [(414, 290)], [(415, 290)], [(415, 290)], [(414, 290)], [(414, 291)], [(414, 291)], [(413, 291)], [(413, 291)], [(414, 291)], [(414, 291)], [(414, 291)], [(416, 290)], [(416, 289)], [(416, 289)], [(417, 290)], [(418, 289)], [(418, 288)], [(418, 289)], [(418, 289)], [(418, 289)], [(418, 288)], [(418, 288)], [(418, 288)], [(418, 288)], [(418, 288)], [], [(423, 288)], [(419, 283)], [(419, 282)], [(420, 282)], [(420, 281)], [(420, 280)], [(420, 279)], [(420, 279)], [(420, 279)], [(416, 279)], [(413, 279)], [(413, 279)], [(413, 279)], [(414, 281)], [(415, 284)], [(416, 285)], [(416, 285)], [(416, 285)], [(416, 285)], [(414, 288)], [(414, 291)], [(414, 291)], [(414, 291)], [(415, 290)], [(415, 288)], [(416, 288)], [(418, 287)], [(418, 286)], [(418, 286)], [(417, 285)], [(416, 284)], [(414, 284)], [(414, 284)], [(415, 286)], [(416, 286)], [(416, 286)], [], [], [(412, 288)], [(411, 284)], [(410, 282)], [(409, 281)], [(410, 279)], [(410, 277)], [(409, 275)]]


TIMMER = [0.09094810485839844, 1.438765048980713, 1.9497556686401367, 2.0237133502960205, 2.0844228267669678, 2.1625401973724365, 2.2250373363494873, 2.3031609058380127, 2.3812601566314697, 2.6781206130981445, 2.8968505859375, 3.0949597358703613, 3.2732203006744385, 3.429476261138916, 3.6169497966766357, 3.804450750350952, 3.973454475402832, 4.1850597858428955, 4.763164281845093, 4.958198070526123, 5.13296365737915, 5.304840564727783, 5.50793719291687, 5.695434808731079, 5.86728310585022, 6.078023433685303, 6.26191782951355, 6.456592082977295, 6.675338506698608, 6.878447532653809, 7.3588502407073975, 7.561947345733643, 7.73380970954895, 7.923633337020874, 8.099552154541016, 8.282323122024536, 8.485416889190674, 8.7041654586792, 8.90727686882019, 9.817507266998291, 10.046597242355347, 10.220501184463501, 10.398894548416138, 10.602006435394287, 10.789507865905762, 10.973457098007202, 11.164336204528809, 11.357024192810059, 11.560131311416626, 11.763246297836304, 11.988935947418213, 12.18181586265564, 12.375228643417358, 12.578345775604248, 12.797063827514648, 13.002911567687988, 13.252773761749268, 13.440796136856079, 13.628286838531494, 13.86262321472168, 14.048757553100586, 14.232502698898315, 14.435611486434937, 14.607474565505981, 14.841830730438232, 15.047482967376709, 15.250893354415894, 15.454015493392944, 16.051411867141724, 16.257657766342163, 16.445168018341064, 16.679522275924683, 16.882615327835083, 17.11753511428833, 17.337708950042725, 17.540799617767334, 17.743907928466797, 17.972059965133667, 18.169041872024536, 18.419049739837646, 18.606529474258423, 18.840871572494507, 19.072758436203003, 19.281363248825073, 19.500088691711426, 20.004505395889282, 20.19779896736145, 20.38528823852539, 20.604044675827026, 20.822758674621582, 21.044002532958984, 21.232768058776855, 21.435880184173584, 21.65460705757141, 21.857705116271973, 22.064491510391235, 22.283243894577026, 22.501973152160645, 22.705069541931152, 22.90819764137268, 23.158663034439087, 23.37929368019104, 23.613633394241333, 23.832374095916748, 24.02969717979431, 24.24167561531067, 24.460413694381714, 24.66354203224182, 24.91610860824585, 25.88786029815674, 26.10120964050293, 26.30432415008545, 26.491814374923706, 26.69491720199585, 26.88239574432373, 27.084726095199585, 27.299994707107544, 27.48747730255127, 27.706212043762207, 27.893697023391724, 28.092668294906616, 28.280168771743774, 28.717632055282593, 28.93931007385254, 29.123205184936523, 29.329813718795776, 29.548566579818726, 29.78290557861328, 30.20769953727722, 30.426451444625854, 30.645188093185425, 30.848297357559204, 31.092108249664307, 31.273392915725708, 31.507731199264526, 31.98953342437744, 32.20080924034119, 32.37268805503845, 32.59140872955322, 32.81014442443848, 33.019097089767456, 33.234689474105835, 33.42218017578125, 33.62531089782715, 33.85966634750366, 34.058717012405396, 34.24260354042053, 34.471890687942505, 34.67499899864197, 34.938761472702026, 35.138665199279785, 35.341777086257935, 35.59178042411804, 35.93843460083008, 36.142481327056885, 36.34561467170715, 36.533103704452515, 36.75183463096619, 36.946303606033325, 37.19428586959839, 37.61613845825195, 37.83488416671753, 38.07550859451294, 38.28943920135498, 38.4925434589386, 38.69565749168396, 38.97762393951416, 39.11455059051514, 39.62278747558594, 39.70090413093567, 39.7790265083313, 39.84154272079468, 39.93030571937561, 40.003283739089966, 40.07722210884094, 40.15717911720276, 40.218241930007935, 40.29636812210083, 40.37448477745056, 40.43697929382324, 40.515116930007935, 40.593218088150024, 40.65571880340576, 40.73385238647461, 40.81197190284729, 40.87445402145386, 40.9577693939209, 41.029727935791016, 41.09968638420105, 41.17166495323181, 41.241605043411255, 41.29998517036438, 41.378090381622314, 41.44058632850647, 41.51870656013489, 41.59684419631958, 41.659323930740356, 41.73745536804199, 41.79995107650757, 41.87806248664856, 41.95795035362244, 42.021886348724365, 42.100019216537476, 42.16250228881836, 42.240614891052246, 42.30311393737793, 42.3812313079834, 42.443742752075195, 42.521849155426025, 42.58434438705444, 42.66247868537903, 42.740581035614014]

def retracage(mode_image, mode_video, POSITION_RIGHT, POSITION_LEFT):

    POSITION_FOR_HULL = []
    POSITION = []

    img = cv2.imread("paint.png")

    
    for i, j in zip(POSITION_RIGHT, POSITION_LEFT):

        if i == [] or j == []:
            POSITION.append(None)
        else:
            mid = ( int( (i[0][0] + j[0][0]) / 2 ), int( (i[0][1] + j[0][1]) / 2 ))
            POSITION_FOR_HULL.append(mid)
            POSITION.append(mid)


    hullConvexe = cv2.convexHull(np.array([POSITION_FOR_HULL]))
    box = cv2.boundingRect(hullConvexe)

    nb_frame = 0
    x, y, w, h = box

    blanck = np.zeros((1000, 1000, 3), np.uint8)
    for i in POSITION:

        if i != None:
            cv2.circle(blanck, i, 1, (0, 0, 255), 1)

            zoom = blanck[y - nb_frame : y + h + nb_frame, x - nb_frame : x + w + nb_frame]
            b,a = zoom.shape[:2]
            zoom = cv2.resize(zoom, (a * 4, b * 4))

            b,a = zoom.shape[:2]
            img = cv2.resize(img, (a, b))

            added_image1 = cv2.addWeighted(zoom,0.4,img,0.5,0)
            
            cv2.imshow("added_image", added_image1)
            cv2.waitKey(1)






    
    for nb, i in enumerate(POSITION):
        print(i)
        blanck_cinematic = np.zeros((1000, 1000, 3), np.uint8)

        if i == None:
            zoom = blanck_cinematic[y - nb_frame : y + h + nb_frame, x - nb_frame : x + w + nb_frame]
            cv2.circle(blanck_cinematic, POSITION[nb - 1], 3, (255, 0, 0), 1)

        else:
            zoom = blanck_cinematic[y - nb_frame : y + h + nb_frame, x - nb_frame : x + w + nb_frame]
            cv2.circle(blanck_cinematic, i, 1, (0, 0, 255), 1)


        b,a = zoom.shape[:2]
        zoom = cv2.resize(zoom, (a * 20, b * 20))

        b,a = zoom.shape[:2]
        img = cv2.resize(img, (a, b))

        added_image = cv2.addWeighted(zoom,0.4,img,0.1,0)

        cv2.imshow("blanck_cinematic", added_image)
        cv2.imshow("img", img)
        cv2.waitKey(0)



    web_site_eye = blanck[y - nb_frame : y + h + nb_frame, x - nb_frame : x + w + nb_frame]
    b,a = web_site_eye.shape[:2]

    web_site_eye = cv2.resize(web_site_eye, (a * 5, b * 5))

    cv2.imshow("web_site_eye", web_site_eye)
    cv2.waitKey(0)












retracage("", "", POSITION_RIGHT, POSITION_LEFT)
